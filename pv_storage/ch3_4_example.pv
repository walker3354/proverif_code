type key .
fun senc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; sdec(senc(m, k), k) = m.

(* Asymmetric key encryption *)

type skey .
type pkey .
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.
reduc forall m: bitstring, sk: skey; adec(aenc(m, pk(sk)), sk) = m.

(* Digital signatures *)

type s_skey.
type spkey.
fun spk(s_skey): spkey.
fun sign(bitstring, s_skey): bitstring.
reduc forall m: bitstring, s_s_k: s_skey; getme_s_s(sign(m, s_s_k)) = m.
reduc forall m: bitstring, s_s_k: s_skey; checksign(sign(m, s_s_k), spk(s_s_k)) = m.

free c: channel.
free s: bitstring[private].
query attacker(s).

event acceptsClient(key).
event acceptsServer(key, pkey).
event termClient(key, pkey).
event termServer(key).

query x: key, y: pkey; event(termClient(x, y)) ==> event(acceptsServer(x, y)).
query x: key; inj-event(termServer(x)) ==> inj-event(acceptsClient(x)).

let clientA(pkA: pkey, skA: skey, pkB: spkey) =
    out(c, pkA);
    in(c, x: bitstring);
    let y = adec(x, skA) in
    let (=pkA, =pkB, k: key) = checksign(y, pkB) in
    event acceptsClient(k);
    out(c, senc(s, k));
    event termClient(k, pkA).

let serverB(pkB: spkey, skB: s_skey, pkA: pkey) =
    in(c, pkX: pkey);(*pkX = pkA*)
    new k: key;
    event acceptsServer(k, pkX);
    out(c, aenc(sign((pkX, pkB, k), skB), pkX));
    in(c, x: bitstring);
    let z = sdec(x, k) in
    if pkX = pkA then event termServer(k).

process
    new skA: skey;
    new skB: s_skey;
    let pkA = pk(skA) in out(c, pkA);
    let pkB = spk(skB) in out(c, pkB);
    ((!clientA(pkA, skA, pkB)) | (!serverB(pkB, skB, pkA)))
